apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'project-report'
apply plugin: 'kotlin-android'
//apply plugin: 'io.objectbox'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.objectbox.android.transform'
apply plugin: 'kotlin-android-extensions'

//从version.properties中读取versionName
def vCode
def vName
Properties p = new Properties()
File lp = project.rootProject.file('version.properties')
if (lp.exists())
    p.load(lp.newDataInputStream())
vName = p.getProperty('versionName')
vCode = p.getProperty('versionCode').toString().toInteger()//要转化成int

def boolean hasSignKey() {
    Properties properties = new Properties()
    File localProperties = project.rootProject.file('local.properties')
    if (localProperties.exists()) {
        properties.load(localProperties.newDataInputStream())
        def store_file = properties.getProperty('store_file')
        return store_file != null
    }
    return false
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.cylan.cleverdog"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        dataBinding.enabled true
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            // 设置支持的CPU架构
            abiFilters 'armeabi-v7a'//, 'x86'//, 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        vectorDrawables.useSupportLibrary = true
    }
    sourceSets.main {
        jniLibs.srcDir 'src/main/libs' //set .so files location to libs instead of jniLibs
        jni.srcDirs = [] //disable automatic ndk-build call
    }
    lintOptions {
        abortOnError false
    }

    dexOptions {
        jumboMode = true
//        incremental true
        javaMaxHeapSize "4g"
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            aidl.srcDirs = ['src/main/aidl']
        }
        _doby {
            java.srcDirs = ['src/_doby/java']
        }
        _cell_c {
            java.srcDirs = ['src/_cell_c/java']
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }

    signingConfigs {

//        config {
//            p.load(project.rootProject.file('local.properties').newDataInputStream())
//            storeFile file(p['key.store'])
//            storePassword p['key.store.password']
//            keyPassword p['key.alias.password']
//            keyAlias p['key.alias']
//        }


        debug {
            v2SigningEnabled true



            Properties properties = new Properties()
            File localProperties = project.rootProject.file('local.properties')
            if (localProperties.exists()) {
                properties.load(localProperties.newDataInputStream())
                def store_file = properties.getProperty('store_file')
                if (store_file != null) {
                    def store_pwd = properties.getProperty('store_pwd')
                    def store_alias = properties.getProperty('store_alias')
                    def store_alias_pwd = properties.getProperty('store_alias_pwd')
                    storeFile file(store_file)
                    storePassword store_pwd
                    keyAlias store_alias
                    keyPassword store_alias_pwd
                }
            }
        }
        release {
            // 满足下面两个条件时需要此配置
            // 1. Gradle版本 >= 2.14.1
            // 2. Android Gradle Plugin 版本 >= 2.2.0
            // 作用是只使用旧版签名，禁用V2版签名模式
            v2SigningEnabled true
            Properties properties = new Properties()
            File localProperties = project.rootProject.file('local.properties')
            if (localProperties.exists()) {
                properties.load(localProperties.newDataInputStream())
                def store_file = properties.getProperty('store_file')
                if (store_file != null) {
                    def store_pwd = properties.getProperty('store_pwd')
                    def store_alias = properties.getProperty('store_alias')
                    def store_alias_pwd = properties.getProperty('store_alias_pwd')
                    storeFile file(store_file)
                    storePassword store_pwd
                    keyAlias store_alias
                    keyPassword store_alias_pwd
                }
            }
        }
    }
    buildTypes {
//        debug {
//            signingConfig signingConfigs.config
//        }
        release {
            if (hasSignKey()) {
//                shrinkResources true
//                minifyEnabled true
//                zipAlignEnabled true
//                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
    }


    productFlavors {
        _yun {
            //vid vkey已经搬到Security.java

            //官方运营
            applicationId "com.cylan.cleverdog"
            versionName vName
            versionCode vCode//0002,ekPVDWnSKiTkwCT3QQkXd0U0SolaYqr1
            manifestPlaceholders = ["HW_PUSH_AUTHORITIES": "com.cylan.cleverdog.hms.update.provider",
                                    "HW_APP_ID"          : "\\ 100044173",
                                    "VID"                : "\\ 0001",
                                    "VKEY"               : "Z5SYDbLV44zfFGRdAgFQhH62fAnIqf3G",
                                    "qqAppId"            : "\\ 1106287288",
                                    "qqAppKey"           : "yNsvacSiQTzArpTg",
                                    "mtaAppKey"          : "Aqc1103156296",
                                    "weChatAppId"        : "wx401c2537655ba462",
                                    "weChatAppSecret"    : "fbb7b851f057882b1f8d3b9fb20506ab",
                                    "sinaAppKey"         : "\\ 2656168776",
                                    "sinaAppSecret"      : "f7f61f712dd94d538514799c462d2083",
                                    "SERVER"             : "yun.jfgou.com:443",
                                    "GCM_APP_ID"         : "\\ 985304692675",
                                    "ApplicationId"      : applicationId,
                                    "XiaoMiAppId"        : "\\ 5881759615576",
                                    "XiaoMiAppKey"       : "MTB5DeGP/CMKSgAiQsUIuw==",
                                    "BUGLY_APPID"        : "f1f2edf649",
                                    "BUGLY_APP_VERSION"  : versionName,
                                    "BUGLY_APP_CHANNEL"  : "cylan",
                                    "TWITTER_APP_KEY"    : "kvWyAC3sYGxaEmfkKDVWrKFa7",
                                    "TWITTER_APP_SECRET" : "S447fVyJ2zZsFwDQUn3Ra11SdQlmmBVyVn4cOsSSiid8nboBbi",
                                    "FACEBOOK_APP_KEY"   : "444251309281886"

            ]
        }
        _doby {
            applicationId "com.cylan.doby"
            versionName vName
            versionCode vCode
            manifestPlaceholders = ["HW_PUSH_AUTHORITIES": "com.cylan.doby.hms.update.provider",
                                    "HW_APP_ID"          : "\\ 100043669",
                                    "VID"                : "\\ 0002",
                                    "VKEY"               : "F6rHsK2c3af7SAV0CKsRQpwa14QijAdB",
                                    "qqAppId"            : "\\ 1106279832",
                                    "qqAppKey"           : "vqSXNT11dsbu24io",
                                    "mtaAppKey"          : "ATQ1JV694AKT",
                                    "weChatAppId"        : "wx81d893be5216671c",
                                    "weChatAppSecret"    : "b867a2e433701bc00dffda2099655d7e",
                                    "sinaAppKey"         : "\\ 2444488421",
                                    "sinaAppSecret"      : "dfba216fe44f0d6613cdda1557790a31",
                                    "SERVER"             : "yun.jfgou.com:443",
                                    "GCM_APP_ID"         : "\\ 985304692675",
                                    "ApplicationId"      : applicationId,
                                    "XiaoMiAppId"        : "\\ 5981759669387",
                                    "XiaoMiAppKey"       : "AFtTDKfrkO6y1WpxoGDbCw==",
                                    "BUGLY_APPID"        : "f1f2edf649",
                                    "BUGLY_APP_VERSION"  : versionName,
                                    "BUGLY_APP_CHANNEL"  : "doby",
                                    "TWITTER_APP_KEY"    : "P4mZddIEumAsk7OnzNWpcrQy8",
                                    "TWITTER_APP_SECRET" : "1T5Pg7UBRVkq6OSvOs9EBEGiMXVLYmAeOdW3HPTazuqjWyzRAm",
                                    "FACEBOOK_APP_KEY"   : "1698182270477391"
                                    //<error>Desktop applications only support the oauth_callback value 'oob'</error>
                                    //新增的app需要在twitter后台,填上callbackUrl
            ]
        }
        _cell_c {
            applicationId "com.cylan.cleverdog.cell_c"
            versionName vName
            versionCode vCode
            manifestPlaceholders = ["HW_PUSH_AUTHORITIES": "com.cylan.cleverdog.cell_c.hms.update.provider",
                                    "HW_APP_ID"          : "\\ 100005405",
                                    "VID"                : "\\ 0060",
                                    "VKEY"               : "doLUb8CEObqCKQpA05ytKKHPu5Q3SvYX",
                                    "qqAppId"            : "\\ 1104534926",
                                    "qqAppKey"           : "lfQJHRh8dDCJtwHu",
                                    "twitterAppKey"      : "kCEeFDWzz5xHi8Ej9Wx6FWqRL",
                                    "twitterAppSecret"   : "Ih4rUwyhKreoHqzd9BeIseAKHoNRszi2rT2udlMz6ssq9LeXw5",
                                    "mtaAppKey"          : "ATQ1JV694AKT",
                                    "weChatAppId"        : "wx382033a16e5cc4a5",
                                    "weChatAppSecret"    : "wx3081bcdae8a842cf",
                                    "sinaAppKey"         : "\\ 1821035549",
                                    "sinaAppSecret"      : "",
                                    "SERVER"             : "yun.jfgou.com:443",
                                    "GCM_APP_ID"         : "\\ 985304692675",
                                    "ApplicationId"      : applicationId,
                                    "XiaoMiAppId"        : "\\ 5721736791425",
                                    "XiaoMiAppKey"       : "ICRz/WmxDXeT4XGEWT2aBQ==",
                                    "BUGLY_APPID"        : "2e94bf542f",
                                    "BUGLY_APP_VERSION"  : versionName,
                                    "BUGLY_APP_CHANNEL"  : "cell_c",
                                    "TWITTER_APP_KEY"    : "",
                                    "TWITTER_APP_SECRET" : "",
                                    "FACEBOOK_APP_KEY"   : ""
            ]
        }
    }


}


repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
    maven { url "http://objectbox.net/beta-repo/" }
}

greendao {
    schemaVersion 8
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //这种方式可以解决:Warning:Conflict with dependency 'com.google.guava:guava'. Resolved versions for app (18.0) and test app (19.0) differ. See http://g.co/androidstudio/app-test-app-conflict for details.
    configurations.all {
        resolutionStrategy.force 'com.android.support:support-annotations:+'
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:+'

    }
    //////////////test///////////////////////
    //testCompile和androidTestCompile的区别在于，测试文件所在的目录。
    //前者在test/，后者在androidTest
    testCompile rootProject.ext.testRobolectric
    testCompile rootProject.ext.testAssertj
    testCompile rootProject.ext.testJunit4
    //    testCompile rootProject.ext.annotation
    testCompile rootProject.ext.testMockio
    androidTestCompile rootProject.ext.testRules
    androidTestCompile rootProject.ext.testRunner
    //强制使用高版本，引用rootProject.ext.annotation，无效
    //    androidTestCompile 'com.android.support:support-annotations:23.3.0'
    androidTestCompile(rootProject.ext.testEspresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    /////////////////android///////////////////////
    compile rootProject.ext.appcompat
    compile rootProject.ext.appSupport
    compile rootProject.ext.recyclerView
    compile rootProject.ext.appDesign
    compile rootProject.ext.appCardview
    /////////////////android///////////////////////
    compile rootProject.ext.butterknife
    kapt rootProject.ext.butterknifeApt
    compile rootProject.ext.rxAndroid
    compile rootProject.ext.permis
    kapt rootProject.ext.permisApt
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    compile rootProject.ext.buglyNdk
    compile rootProject.ext.buglySdk
    debugCompile rootProject.ext.leakcanaryAndroid
    releaseCompile rootProject.ext.leakcanaryAndroidNoOp
    testCompile rootProject.ext.leakcanaryAndroidNoOp
    //add by hunt 2016-08-01
    compile rootProject.ext.switchButton
    //glide
    compile rootProject.ext.glide
    //渠道包
    compile files('libs/open_sdk_r5781.jar')
    compile files('libs/mid-sdk-2.3.jar')
    testCompile files('libs/javassist.jar')
    fileTree(dir: 'libs', include: '**/*.aar')
            .each { File file ->
        dependencies.add("compile", [
                name: file.name.lastIndexOf('.').with {
                    it != -1 ? file.name[0..<it] : file.name
                },
                ext : 'aar'
        ])
    }
//    compile(group: 'com.cylan.library', name: 'iotsdk', version: '1.0-20171102.062102-20', ext: 'aar')
    //谷歌推送
    compile files('libs/MiPush_SDK_Client_3_2_2.jar')
    compile('com.mikepenz:fastadapter:2.6.2@aar') {
        transitive = true
    }
    compile 'com.mikepenz:fastadapter-commons:2.6.0@aar'
    compile 'com.mikepenz:materialize:1.0.2@aar'
    compile 'com.mikepenz:fastadapter-extensions:2.6.0@aar'
    //可以单独使用，不需要依赖下方的扩展包
    //RxJava扩展支持，根据需要添加
    //可以单独使用，不需要依赖下方的扩展包
    //RxJava扩展支持，根据需要添加
    compile 'com.cylan.ext:annotations:0.1.0'
    kapt project(':processor')
    compile 'tv.danmaku.ijk.media:ijkplayer-java:0.7.5'
    compile 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.7.5'
    compile 'tv.danmaku.ijk.media:ijkplayer-exo:0.7.5'
    compile 'com.danikula:videocache:2.6.4'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.0.0'
    compile 'org.greenrobot:greendao:3.2.0'
    compile 'com.google.dagger:dagger:2.10'
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'com.jakewharton.rxbinding:rxbinding:1.0.1'
    compile 'com.jakewharton.rxbinding:rxbinding-support-v4:1.0.1'
    compile 'com.jakewharton.rxbinding:rxbinding-recyclerview-v7:1.0.1'
    compile 'com.jakewharton.rxbinding:rxbinding-design:1.0.1'
    compile 'com.jakewharton.rxbinding:rxbinding-appcompat-v7:1.0.1'
    compile 'com.google.android.gms:play-services-gcm:10.2.1'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.2.0'
    compile 'com.daimajia.easing:library:2.0@aar'
    compile 'com.daimajia.androidanimations:library:2.2@aar'
    compile 'com.lzy.net:okgo:2.1.4'
    compile 'com.lzy.net:okrx:0.1.2'
    compile 'com.lzy.net:okserver:1.1.3'
    compile 'org.jsoup:jsoup:1.10.2'
    compile 'com.romandanylyk:pageindicatorview:0.2.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar'
    compile 'de.hdodenhof:circleimageview:2.1.0'
    kapt 'com.google.dagger:dagger-compiler:2.10'
    compile 'com.mcxiaoke.packer-ng:helper:2.0.0'
    compile 'org.jetbrains.kotlin:kotlin-stdlib:+'
    compile 'org.msgpack:msgpack-core:0.8.13'
    compile 'org.msgpack:jackson-dataformat-msgpack:+'
    compile 'com.google.code.gson:gson:2.8.1'
//    compile 'de.greenrobot:java-common:2.3.1'
    compile "io.objectbox:objectbox-android:$objectBoxVersion"
    compile "io.objectbox:objectbox-kotlin:$objectBoxVersion"
    kapt "io.objectbox:objectbox-processor:$objectBoxVersion"
    kapt "com.android.databinding:compiler:2.3.3"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.0"

    //youtube rtmp 配置 配置
    compile 'com.google.android.gms:play-services-auth:10.2.1'
    compile 'pub.devrel:easypermissions:0.3.0'
    compile('com.google.api-client:google-api-client-android:1.22.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    compile('com.google.apis:google-api-services-youtube:v3-rev183-1.22.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    compile 'com.androidkun:XTabLayout:1.1.3'
}

/////////////////编译过滤器/////////////////////////////////
//只需要在一个文件中读出需要编译的 variant名字
def List<String> getBuildVariantList() {
    Properties vFile = new Properties()
    File file = rootProject.file('variant.properties')
    if (file.exists())
        vFile.load(file.newDataInputStream())
    else throw new IllegalArgumentException("variant.properties 文件不存在")
    String buildVariant = vFile.getProperty('buildVariant')
    if (buildVariant == null) return new ArrayList<String>()
    ArrayList<String> vList = new ArrayList(Arrays.asList(buildVariant.split(",")))
    println("hunt..." + vList)
    return vList
}

List<String> variantFilterList = getBuildVariantList()

android.variantFilter { variant ->
    String name = variant.getFlavors().get(0).name
    boolean toBuild = variantFilterList.contains(name)
    println("oem...." + name + ",toBuild?" + toBuild)
    if (!toBuild) {
        variant.setIgnore(true)//true:不编译此variant
    }
}
/////////////////////////////////////////////////////
//谷歌推送
//apply plugin: 'com.google.gms.google-services'
